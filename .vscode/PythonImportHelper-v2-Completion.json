[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "WebScraper",
        "importPath": "handler.web_scraper",
        "description": "handler.web_scraper",
        "isExtraImport": true,
        "detail": "handler.web_scraper",
        "documentation": {}
    },
    {
        "label": "BlobStorage",
        "importPath": "handler.blob_storage",
        "description": "handler.blob_storage",
        "isExtraImport": true,
        "detail": "handler.blob_storage",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "bs4",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bs4",
        "description": "bs4",
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "upload_input",
        "kind": 2,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "def upload_input(type: str = None, body: dict = Body(...)):\n    random_uuid = BlobStorage.generate_uuid()\n    if type == 'text':\n        BlobStorage.upload_file(random_uuid, 'input_file.txt', str(body['payload']))\n    elif type == 'url':\n        website_soup = WebScraper.get_website_soup(body['payload'])\n        website_content = WebScraper.scrape_website_soup(website_soup)\n        BlobStorage.upload_file(random_uuid, 'input_file.txt', '\\n'.join(website_content))\n    else:\n        raise HTTPException(status_code=400, detail=\"Input type not supported\")",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "app = FastAPI()\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allows all origins (replace with specific domains if needed)\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Allows all HTTP methods\n    allow_headers=[\"*\"],  # Allows all headers\n)\n@app.post(\"/upload-input\")",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "BlobStorage",
        "kind": 6,
        "importPath": "backend.handler.blob_storage",
        "description": "backend.handler.blob_storage",
        "peekOfCode": "class BlobStorage:\n    @staticmethod\n    def upload_file(user_id:str, file_name:str, data: str):\n        directory_path = os.path.join(STORAGE_PATH, str(user_id))\n        os.makedirs(directory_path, exist_ok=True)\n        file_path = os.path.join(directory_path, file_name)\n        with open(file_path, 'w') as file:\n            file.write(data)\n    @staticmethod\n    def generate_uuid():",
        "detail": "backend.handler.blob_storage",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.handler.blob_storage",
        "description": "backend.handler.blob_storage",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\nSTORAGE_PATH = os.getenv(\"STORAGE_PATH\")\nDIRECTORY = os.path.join(BASE_DIR, '..', STORAGE_PATH)  # Navigate to the 'public' folder inside your project\nSTORAGE_PATH = os.path.abspath(STORAGE_PATH)\nclass BlobStorage:\n    @staticmethod\n    def upload_file(user_id:str, file_name:str, data: str):\n        directory_path = os.path.join(STORAGE_PATH, str(user_id))\n        os.makedirs(directory_path, exist_ok=True)\n        file_path = os.path.join(directory_path, file_name)",
        "detail": "backend.handler.blob_storage",
        "documentation": {}
    },
    {
        "label": "STORAGE_PATH",
        "kind": 5,
        "importPath": "backend.handler.blob_storage",
        "description": "backend.handler.blob_storage",
        "peekOfCode": "STORAGE_PATH = os.getenv(\"STORAGE_PATH\")\nDIRECTORY = os.path.join(BASE_DIR, '..', STORAGE_PATH)  # Navigate to the 'public' folder inside your project\nSTORAGE_PATH = os.path.abspath(STORAGE_PATH)\nclass BlobStorage:\n    @staticmethod\n    def upload_file(user_id:str, file_name:str, data: str):\n        directory_path = os.path.join(STORAGE_PATH, str(user_id))\n        os.makedirs(directory_path, exist_ok=True)\n        file_path = os.path.join(directory_path, file_name)\n        with open(file_path, 'w') as file:",
        "detail": "backend.handler.blob_storage",
        "documentation": {}
    },
    {
        "label": "DIRECTORY",
        "kind": 5,
        "importPath": "backend.handler.blob_storage",
        "description": "backend.handler.blob_storage",
        "peekOfCode": "DIRECTORY = os.path.join(BASE_DIR, '..', STORAGE_PATH)  # Navigate to the 'public' folder inside your project\nSTORAGE_PATH = os.path.abspath(STORAGE_PATH)\nclass BlobStorage:\n    @staticmethod\n    def upload_file(user_id:str, file_name:str, data: str):\n        directory_path = os.path.join(STORAGE_PATH, str(user_id))\n        os.makedirs(directory_path, exist_ok=True)\n        file_path = os.path.join(directory_path, file_name)\n        with open(file_path, 'w') as file:\n            file.write(data)",
        "detail": "backend.handler.blob_storage",
        "documentation": {}
    },
    {
        "label": "STORAGE_PATH",
        "kind": 5,
        "importPath": "backend.handler.blob_storage",
        "description": "backend.handler.blob_storage",
        "peekOfCode": "STORAGE_PATH = os.path.abspath(STORAGE_PATH)\nclass BlobStorage:\n    @staticmethod\n    def upload_file(user_id:str, file_name:str, data: str):\n        directory_path = os.path.join(STORAGE_PATH, str(user_id))\n        os.makedirs(directory_path, exist_ok=True)\n        file_path = os.path.join(directory_path, file_name)\n        with open(file_path, 'w') as file:\n            file.write(data)\n    @staticmethod",
        "detail": "backend.handler.blob_storage",
        "documentation": {}
    },
    {
        "label": "WebScraper",
        "kind": 6,
        "importPath": "backend.handler.web_scraper",
        "description": "backend.handler.web_scraper",
        "peekOfCode": "class WebScraper:\n    @staticmethod\n    def get_website_soup(website_link: str):\n        body = requests.get(website_link)\n        soup = bs.BeautifulSoup(body.content, 'html.parser')\n        return soup\n    @staticmethod\n    def scrape_website_soup(soup):\n        paragraphs = []\n        headings = []",
        "detail": "backend.handler.web_scraper",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "backend.run_server",
        "description": "backend.run_server",
        "peekOfCode": "HOST = os.getenv(\"HOST\", \"127.0.0.1\")\nPORT = int(os.getenv(\"PORT\", 8080))\nif __name__ == \"__main__\":\n    uvicorn.run(\"app.main:app\", host=HOST, port=PORT, reload=True)",
        "detail": "backend.run_server",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "backend.run_server",
        "description": "backend.run_server",
        "peekOfCode": "PORT = int(os.getenv(\"PORT\", 8080))\nif __name__ == \"__main__\":\n    uvicorn.run(\"app.main:app\", host=HOST, port=PORT, reload=True)",
        "detail": "backend.run_server",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]